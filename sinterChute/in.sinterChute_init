#SVAI Schachtkuehler
#Christoph Kloss, May 2011
echo		both
variable    rolfrtyp string	epsd2
shell   mkdir restart_init
shell   mkdir post_init
variable    volFrac equal 0.01 # 0.60

atom_style	granular
atom_modify	map array
boundary	f f f
newton		off

communicate	single vel yes

#parallelization
processors      ${XPROCS} ${YPROCS} ${ZPROCS}
#loadbalance	nlocal/simple ntry 10

units		si

region		reg block -1.1 1.1  -1. 6.  -4.8 3.8 units box
create_box	2 reg

variable skin equal 0.02

neighbor	${skin} bin
neigh_modify	delay 0 binsize 0.08
neigh_modify 	one 3000

#Material properties required for new pair styles
#*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=
#  ALL VARIABLES HERE ARE PARAMETERS
#*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=

#coarse graining factor
variable 	cg equal ${DCYLDP} #5.0

#*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=

#Material properties for material 1 = coal,  material 2 = dri material 3 = wall
#friction angle of 25 deg with wall
fix 		m1 all property/global youngsModulus peratomtype 300.e6 200.e6
fix 		m2 all property/global poissonsRatio peratomtype 0.4 0.4
fix 		m3 all property/global coefficientRestitution peratomtypepair 2 &
                0.2 0.2 & 
                0.2 0.2 & 

variable	cof1 equal 0.7*1.3
variable	cof2 equal 0.5*1.3
fix 		m4 all property/global coefficientFriction peratomtypepair 2 &
                ${cof1} ${cof2}  &
                ${cof2} ${cof2}  
                
variable	corf1 equal 0.07*5.
variable	corf2 equal 0.05*5.                     
fix 		m5 all property/global coefficientRollingFriction peratomtypepair 2 &
                ${corf1} ${corf2}  &
                ${corf2} ${corf2} 

fix 		m6 all property/global characteristicVelocity scalar 1.0
fix 		m7 all property/global k_finnie peratomtypepair 2 &
		0.1 0.1 &
		0.1 0.1 

#densities
variable	SinterDens equal 2900.

#NEW sinter: radii for fractions
variable	rS0 equal ${cg}*0.005/2.
variable	rS1 equal ${cg}*0.006/2.
variable	rS2 equal ${cg}*0.010/2.
variable	rS3 equal ${cg}*0.016/2.
variable	rS4 equal ${cg}*0.025/2.
variable	rS5 equal ${cg}*0.040/2.
variable	rS6 equal ${cg}*0.050/2.


#coal diameter fractions
fix		sinter0 all particletemplate/sphere 1 atom_type 1 density constant ${SinterDens} radius constant ${rS0}
fix		sinter1 all particletemplate/sphere 1 atom_type 1 density constant ${SinterDens} radius constant ${rS1}
fix		sinter2 all particletemplate/sphere 1 atom_type 1 density constant ${SinterDens} radius constant ${rS2}
fix		sinter3 all particletemplate/sphere 1 atom_type 1 density constant ${SinterDens} radius constant ${rS3}
fix		sinter4 all particletemplate/sphere 1 atom_type 1 density constant ${SinterDens} radius constant ${rS4}
fix		sinter5 all particletemplate/sphere 1 atom_type 1 density constant ${SinterDens} radius constant ${rS5}
fix		sinter6 all particletemplate/sphere 1 atom_type 1 density constant ${SinterDens} radius constant ${rS6}
#fix		sinter7 all particletemplate/sphere 1 atom_type 1 density constant ${SinterDens} radius constant ${rS7}

#NEW mass % for diameter fractions
variable	mS0 equal 0.185
variable	mS1 equal 0.160
variable	mS2 equal 0.212
variable	mS3 equal 0.141
variable	mS4 equal 0.106
variable	mS5 equal 0.090
variable	mS6 equal 0.106


#particle distribution

fix 	pdd all particledistribution/discrete 524287 7 &
		sinter0 ${mS0} sinter1 ${mS1} sinter2 ${mS2} sinter3 ${mS3} &
		sinter4 ${mS4} sinter5 ${mS5} sinter6 ${mS6}


#New pair style
pair_style 	gran model hertz tangential history rolling_friction ${rolfrtyp}  #Hertzian without cohesion
pair_coeff	* *

timestep	0.000001

fix		gravi all gravity 9.81 vector 0.0 0.0 -1.0

#meshes
fix		cad all mesh/surface file mesh/mesh.stl          type     2  scale 0.001 
fix		inface all mesh/surface file mesh/mesh_insertion.stl          type     2  scale 0.001 
region		insmesh mesh/tet  file mesh/mesh_fill.vtk          scale 0.001 move 0.0 0.0 0.0 rotate 0.0 0.0 0.0 units box
#units box

#fix		meshwalls all wall/gran/hooke 1 0 mesh/gran 1 cad
fix 		meshwalls all wall/gran model hertz tangential history rolling_friction ${rolfrtyp} mesh n_meshes 1 meshes cad
#fix		xwalls all wall/gran/hooke 1 0 xplane -1.1 1.1  2
fix		xwalls1 all wall/gran model hertz tangential history rolling_friction ${rolfrtyp} primitive type 1 xplane -1.1 
fix		xwalls2 all wall/gran model hertz tangential history rolling_friction ${rolfrtyp} primitive type 1 xplane  1.1
fix		ywalls1 all wall/gran model hertz tangential history rolling_friction ${rolfrtyp} primitive type 1 yplane -1.0 
fix		ywalls2 all wall/gran model hertz tangential history rolling_friction ${rolfrtyp} primitive type 1 yplane  6.0
fix		zwalls1 all wall/gran model hertz tangential history rolling_friction ${rolfrtyp} primitive type 1 zplane -4.8 
#fix		xwalls2 all wall/gran model hertz tangential history rolling_friction ${rolfrtyp} primitive type 1 xplane  1.1
#fix		ywalls all wall/gran/hooke 1 0 yplane -1.0 6.0  2
#fix		zwalls all wall/gran/hooke 1 0 zplane -4.8 NULL 2

#particle insertion
fix		ins all insert/pack seed 100001 distributiontemplate pdd &
		insert_every once overlapcheck no volumefraction_region ${volFrac} region insmesh ntry_mc 10000

#apply relaxation integration
variable	dx_relax equal 0.00001
fix		integr_relax all nve/limit absolute ${dx_relax}

#output settings, include total thermal energy
compute		1 all erotate/sphere
fix		2 all check/timestep/gran 500 0.15 0.15
thermo_style	custom step atoms ke c_1 f_2[1] f_2[2] cpu vol
thermo		500
thermo_modify	lost ignore norm no
compute_modify	thermo_temp dynamic yes

restart		10000	restart_init/sinterChuteInit*.restart

#insert the first particles so that dump is not empty
run		1
dump		dmp all custom 20000 post_init/dump*.sinterChute id type x y z vx vy vz fx fy fz omegax omegay omegaz radius 
dump 		dumpstress all mesh/gran/VTK 20000 post_init/dump*.vtk stress wear cad

#run
run			100000


#run particle relaxation - check kinetic energy
variable ke equal ke
print "ke ${ke}"
variable kin_en_thre equal 1000

label loop
  print "-----> Checking Kinetic Energy..."
  if "${ke} < ${kin_en_thre}" then "jump SELF endloop"
  print "-----> ke ${ke}, ke_threshold ${kin_en_thre}, continuing run"  
  set group all vx 0. vy 0. vz 0.
  run 10000
jump SELF loop
label endloop

write_restart	restart_init/packing.restart

