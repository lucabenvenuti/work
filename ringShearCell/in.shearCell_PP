echo both
log log.liggghts

atom_style	granular
atom_modify	map array
boundary	m m fm
newton		off

communicate	single vel yes

units		si

#distribute processores only in x & y direction
processors * * 1
read_restart	../restart/packing.restart

# material params and diameter distribution
#===========================================LIGGGHTS STYLE
# PAIR STYLE
# one of:
# model hooke hertz
# tangential no_history history
# rolling_friction cdt epsd off
# tangential_damping on off
#===========================================

variable pairStyle string hertz
variable pairTangential string history
variable pairRollFric string epsd
variable pairTangDamping string off

# FIXED MATERIAL PROPERTIES
#===========================================

variable    youngsModulus equal 5.0e6
variable    poissonsRatio equal 0.45
variable    coefficientRestitution equal 0.9
variable    characteristicVelocity equal 1.0
variable    coefficientRollingViscousDamping equal 0.3


# only used in wall models:
variable    youngsModulus_wall equal 5.0e6
variable    poissonsRatio_wall equal 0.45
variable    coefficientRestitution_wall equal 0.2
variable    coefficientRestitution_pw equal 0.8
variable    coefficientRollingViscousDamping_pw equal 0.3


#===========================================
# DIAMETER DISTRIBUTION
#===========================================

#volume fraction
variable    volFrac equal 0.65

#density
variable    density equal 1625./${volFrac}

#radii for fractions
variable    r0 equal 0.0005/2.

#diameter fractions
fix     fraction0 all particletemplate/sphere 1. atom_type 1 density constant ${density} radius constant ${r0}

#particle distribution for insertion
fix     pdd all particledistribution/discrete 1.  1 &
        fraction0 1








#********************************************
# FIX DEFINITION
# DO NOT CHANGE!!!!
#********************************************
#inclined wall
if "${CALIB_PARAM} == 1" then &
"fix m1 all property/global youngsModulus peratomtype ${youngsModulus} ${youngsModulus_wall}" &
"fix m2 all property/global poissonsRatio peratomtype ${poissonsRatio} ${poissonsRatio_wall}" &
"fix m3 all property/global coefficientRestitution peratomtypepair 2 ${coefficientRestitution} ${coefficientRestitution_pw} ${coefficientRestitution_pw} ${coefficientRestitution_wall}" &
"fix m6 all property/global characteristicVelocity scalar ${characteristicVelocity}" &
"fix     	m7 all property/global coefficientRollingViscousDamping peratomtypepair 2 ${coefficientRollingViscousDamping} ${coefficientRollingViscousDamping_pw} ${coefficientRollingViscousDamping_pw} ${coefficientRollingViscousDamping_pw}"

#angle of repose
if "${CALIB_PARAM} == 2" then &
"fix 		m1 all property/global youngsModulus peratomtype ${youngsModulus}" &
"fix 		m2 all property/global poissonsRatio peratomtype ${poissonsRatio}" &
"fix 		m3 all property/global coefficientRestitution peratomtypepair 1 ${coefficientRestitution}" &
"fix 		m6 all property/global characteristicVelocity scalar ${characteristicVelocity}" &
"fix     	m7 all property/global coefficientRollingViscousDamping peratomtypepair 1 ${coefficientRollingViscousDamping}"

#shear cell
if "${CALIB_PARAM} == 3" then &
"fix 		m1 all property/global youngsModulus peratomtype ${youngsModulus}" &
"fix 		m2 all property/global poissonsRatio peratomtype ${poissonsRatio}" &
"fix 		m3 all property/global coefficientRestitution peratomtypepair 1 ${coefficientRestitution}" &
"fix 		m6 all property/global characteristicVelocity scalar ${characteristicVelocity}" &
"fix     	m7 all property/global coefficientRollingViscousDamping peratomtypepair 1 ${coefficientRollingViscousDamping}"

#shear cell pw
if "${CALIB_PARAM} == 4" then &
"fix 		m1 all property/global youngsModulus peratomtype ${youngsModulus} ${youngsModulus}" &
"fix 		m2 all property/global poissonsRatio peratomtype ${poissonsRatio} ${poissonsRatio}" &
"fix 		m3 all property/global coefficientRestitution peratomtypepair 2 ${coefficientRestitution} ${coefficientRestitution} ${coefficientRestitution} ${coefficientRestitution}" &
"fix 		m6 all property/global characteristicVelocity scalar ${characteristicVelocity}" &
"fix     	m7 all property/global coefficientRollingViscousDamping peratomtypepair 2 ${coefficientRollingViscousDamping} ${coefficientRollingViscousDamping_pw} ${coefficientRollingViscousDamping_pw} ${coefficientRollingViscousDamping_pw}"

fix	m4 all property/global coefficientFriction peratomtypepair 1 ${cof}
fix m5 all property/global coefficientRollingFriction peratomtypepair 1 ${corf}

variable	skin equal 1.0*${r0}
neighbor	${skin} bin
neigh_modify	delay 0

# New pair style
pair_style 	gran model hooke rolling_friction ${pairRollFric}
pair_coeff	* *

# time-step and gravity
variable 	shear_mod  equal ${youngsModulus}/(2.0*(${poissonsRatio}+1.0))
variable	t_rayleigh equal PI*${r0}*sqrt(${density}/${shear_mod})/(0.1631*${poissonsRatio}+0.8766)
variable	dt equal 10.0^(floor(log(${t_rayleigh}))-1)
timestep	${dt}
print "timestep ${dt}"

fix		gravi all gravity 9.81 vector 0.0 0.0 -1.0
###########################################################################
# calculate maximum diameter in simulation
fix		maxdiam all diam/max
variable	maxdiam equal f_maxdiam

# scaling factor for mesh
#GeometrySize: R=0.1, r=0.05, h=0.04
#scale = ratio*maxdiam / (2R-2r)  -> N of Particles in one diameter
variable scale equal ${G_D_RATIO}*${maxdiam}/0.1

#VARIABLES
############################################

variable volumeFraction equal .4  #mod JoKer
variable lidOffSet equal 0.025*${scale} # lid z positive offset
variable outerRadius equal .0985*${scale}
variable innerRadius equal .0515*${scale}
variable averageRadius equal 2/3*(${outerRadius}*${outerRadius}*${outerRadius}-${innerRadius}*${innerRadius}*${innerRadius})/(${outerRadius}*${outerRadius}-${innerRadius}*${innerRadius})  #${innerRadius}+(${outerRadius}-${innerRadius})*2/3
variable aCell equal PI*${outerRadius}*${outerRadius}-PI*${innerRadius}*${innerRadius}
# crazy formulas from paper

variable shearing equal .5/60 ##Scherrate in m/min JoKer
variable shearingSlow equal 0.01/60
variable omegaShearing equal ${shearing}/${averageRadius}
variable omegaShearingSlow equal ${shearingSlow}/${averageRadius}

variable targetNormalPreShearForce equal -${targetNormalPreShearStress}*${aCell}
variable targetNormalShearForce equal -${targetNormalShearStress}*${aCell}
variable targetLiftOff equal 65.0e3*${aCell}
variable targetTouchBack equal -3.5e3*${aCell}


#CONTROLLER PARAMS
variable lidVelMax equal 2.0

variable kp equal 0.01
variable ki equal 0.0005 #mod JoKer
variable kd equal 0.0

variable omega equal 0.


#Output & run time settings
variable dumpfreq     equal 0.01/${dt}
variable thermofreq   equal 0.001/${dt}

variable nTimeStepsInsertParticles equal 0.25/${dt}
# touchdown
variable nTimeStepsLand equal 1.0/${dt}
# prepare bulk
variable nTimeStepsPrepareBulk equal 2.5/${dt}
# lift off
variable nTimeStepsLiftBulk equal 0.4/${dt}
# measurement
variable nTimeStepsMeas equal 2.5/${dt}
# steady state iteration
variable nTimeStepsIter equal 0.01/${dt}


# walls
fix stlCell all mesh/surface file ../geo/cell.stl type 1	scale ${scale} rotate axis 1. 0. 0. angle 0.
fix wall all wall/gran model hooke rolling_friction ${pairRollFric} mesh n_meshes 1 meshes stlCell


# apply nve integration to all particles that are inserted as single particles
fix		integr all nve/sphere

#####################################
#SET RIGHT PAIR STYLES
run		1
unfix		wall
pair_style 	gran model ${pairStyle} tangential_damping ${pairTangDamping} tangential ${pairTangential} rolling_friction ${pairRollFric}
pair_coeff      * *

variable targetNormalForce equal ${targetNormalPreShearForce}
fix servoWall all mesh/surface/stress/servo file ../geo/lid2.stl type 1 scale ${scale} move 0. 0. ${lidOffSet} com 0. 0. ${lidOffSet} ctrlPV force axis 0. 0. 1. target_val ${targetNormalForce} vel_max ${lidVelMax} kp ${kp} ki ${ki} kd ${kd}
fix             wall all wall/gran model ${pairStyle} tangential ${pairTangential} rolling_friction ${pairRollFric} mesh n_meshes 2 meshes stlCell servoWall

## BALANCE
fix bal all balance 1000 xyz 20 1.1

###################################
variable simTime equal step*dt
variable absForce equal sqrt(f_servoWall[1]*f_servoWall[1]+f_servoWall[2]*f_servoWall[2]+f_servoWall[3]*f_servoWall[3])
variable absMoment equal sqrt(f_servoWall[4]*f_servoWall[4]+f_servoWall[5]*f_servoWall[5]+f_servoWall[6]*f_servoWall[6])

variable normalShearStress equal f_servoWall[3]/${aCell}
variable absNormalShearStress equal v_absForce/${aCell}
variable tangentialShearStress equal v_absMoment/${averageRadius}/${aCell}

fix bal all balance 1000 xyz 10 1.2

variable nAtoms equal atoms
variable lidHeight equal f_servoWall[9]
variable forceInZ equal f_servoWall[3]


variable winSize equal 0.1/${dt}
fix runAVGlidHeight all ave/time 1 1 1 v_lidHeight mode scalar ave window ${winSize}
variable meanlidHeight equal f_runAVGlidHeight

####################################
fix particleData_r all ave/time 1 1 ${dumpfreq} &
	v_simTime v_nAtoms v_forceInZ v_normalShearStress v_absForce v_absNormalShearStress v_absMoment v_tangentialShearStress v_lidHeight &
	mode scalar file shearExperiment.dat ave one

fix meanTShearStress all ave/time 1 1 1 v_tangentialShearStress mode scalar ave window ${winSize}
variable meanTShearStress equal f_meanTShearStress

#shell mkdir geoDump
#shell mkdir parDump
#dump dumpParData all custom ${dumpfreq} parDump/dump_*.dmp id type x y z ix iy iz vx vy vz fx fy fz omegax omegay omegaz radius
#dump dumpCell all mesh/stl ${dumpfreq} geoDump/geo.cell.*.stl stlCell
#dump dumpLid all mesh/stl ${dumpfreq} geoDump/geo.lid.*.stl servoWall

thermo_style custom step atoms cpuremain v_forceInZ v_normalShearStress v_tangentialShearStress f_servoWall[9]
thermo ${thermofreq}



###############################################################################
###########################                          START OF ACTUAL RUNS
###############################################################################

print "*** prepare PRE-SHEARING -> lid descent"
####################################
fix_modify servoWall target_val ${targetNormalPreShearForce}

run ${nTimeStepsLand}

print "*** PRE-SHEARING..."
###################################
variable omega equal ${omegaShearing}
variable periodT equal 2*PI/${omega}
fix moveCellPreShearing all move/mesh mesh stlCell rotate origin 0. 0. 0. axis 0. 0. -1. period ${periodT}
run ${nTimeStepsPrepareBulk}


######### WELCOME TO THE 'FIND THE STEADYYYYY STATE' SHOW #########################################
# LETS TRY THE LID LOOP
variable vThres equal 5e-6 ## criteria of deltaV/V or deltaH/H
variable negThres equal -1*${vThres}
variable lidHold equal ${meanlidHeight}
variable cellHeight equal 0.04*${scale} #scaled
run ${nTimeStepsIter}

label loop
# relMov = deltaZ / cellHeight
variable relMov equal (${lidHold}-${meanlidHeight})/${cellHeight}
print "-----> Checking vel... ${relMov}"
if "(${relMov}<${vThres} && ${relMov}>=0) || (${relMov}>${negThres} && ${relMov}<=0)" then "jump in.shearCell_PP endloop"
print "-----> relMov ${relMov}, threshold ${vThres}, continuing run" 
#variable lidHold equal ${lidHeight} 
variable lidHold equal ${meanlidHeight} 
run ${nTimeStepsIter}
jump in.shearCell_PP loop
label endloop

# change to slow rotational speed to match realistic shear-rates
variable omega equal ${omegaShearingSlow}
variable periodT equal 2*PI/${omega}
unfix moveCellPreShearing
fix moveCellPreShearing all move/mesh mesh stlCell rotate origin 0. 0. 0. axis 0. 0. -1. period ${periodT}

run ${nTimeStepsIter}

label loop3
#variable relMov equal (${lidHold}-${lidHeight})/${cellHeight}
variable relMov equal (${lidHold}-${meanlidHeight})/${cellHeight}
print "-----> Checking vel... ${relMov}"
if "(${relMov}<${vThres} && ${relMov}>=0) || (${relMov}>${negThres} && ${relMov}<=0)" then "jump in.shearCell_PP endloop3"
print "-----> relMov ${relMov}, threshold ${vThres}, continuing run" 
#variable lidHold equal ${lidHeight} 
variable lidHold equal ${meanlidHeight} 
run ${nTimeStepsIter}
jump in.shearCell_PP loop3
label endloop3


##SAVE steady state shear FLIESSPUNKT
fix printFP1 all print 1 "${meanTShearStress}" screen no file FP1.txt
run 1
unfix printFP1

print "*** prepare SHEARING -> lid liftoff and touchback"
###################################
variable omega equal 0.
unfix moveCellPreShearing
fix_modify servoWall target_val ${targetLiftOff}
variable halfRun equal floor(${nTimeStepsLiftBulk}/2.)
run ${halfRun}
fix_modify servoWall target_val ${targetTouchBack}
variable halfRun2 equal ${nTimeStepsLiftBulk}-${halfRun}
run ${halfRun2}

variable step equal step
fix printFP2 all print 1 "${simTime} ${step}" screen no file FP2.txt
run 1
unfix printFP2


print "*** SHEARING..."
###################################
variable omega equal ${omegaShearing}
variable periodT equal 2*PI/${omega}
fix moveCellShearing all move/mesh mesh stlCell rotate origin 0. 0. 0. axis 0. 0. -1. period ${periodT}

fix_modify servoWall target_val ${targetNormalShearForce}

run ${nTimeStepsMeas}

label loop2
#variable relMov equal (${lidHold}-${lidHeight})/${cellHeight}
variable relMov equal (${lidHold}-${meanlidHeight})/${cellHeight}
print "-----> Checking vel... ${relMov}"
if "(${relMov}<${vThres} && ${relMov}>=0) || (${relMov}>${negThres} && ${relMov}<=0)" then "jump in.shearCell_PP endloop2"
print "-----> relMov ${relMov}, threshold ${vThres}, continuing run" 
#variable lidHold equal ${lidHeight} 
variable lidHold equal ${meanlidHeight} 
run ${nTimeStepsIter}
jump in.shearCell_PP loop2
label endloop2

print "*** MEASUREMENT FINISHED!"
fix printFP3 all print 1 "${meanTShearStress}" screen no file FP3.txt
run 1
unfix printFP3
###################################
