#########################################################################################
# title: in.shearCell_init_packing                                                      #
# version: 3.17                                                                         #
# additional files: folder mesh,                                                        #
#                   folder matlab,                                                      #
#                   loop input script in.shearCell_loop                                 #
# date: Apr. 2014                                                                       #
# authors: Benvenuti, L., Queteschiner, D., Aigner, A.                                  #
# e-mail: luca.benvenuti@jku.at                                                         #
# short description: liggghts-input file for computing the shear force of a simple      #
#   shear tester while varying the coefficient of friction.                             #
# The normal load can be varied during the simulation                                   #
# Part of the material characterization project                                         #
#########################################################################################
#########################################################################################
#                               user defined settings: settings                         #
#########################################################################################
variable    rad     equal       518e-6          # particle radius [m]
variable    radmu   equal       518e-6             # particle radius mean [m]
variable  radsigma  equal       0.000287             # particle radius sigma[m]
variable  radR1     equal       0.001
variable  radPerc1  equal       0.175
variable  radR2     equal       0.0008
variable  radPerc2  equal       0.139
variable  radR3     equal       0.000625
variable  radPerc3  equal       0.098
variable  radR4     equal       0.0005
variable  radPerc4  equal       0.0091
variable  radR5     equal       0.000315
variable  radPerc5  equal       0.3
variable  radR6     equal       0.0001575
variable  radPerc6  equal       0.197
#variable  volMin    equal       4/3*${radR6}*${radR6}*${radR6}*PI*0.99
variable    dens    equal       3000      #sinterfine      # particle density [kg/m3]
variable    ym      equal       1e7             # Young's modulus  [Pa]
variable    pr      equal       0.4            # Poisson ratio   [-]
variable    rest    equal       0.5            # coefficient of restitution [-]
variable    fric    equal       0.3        # coefficient of friction (loop variable) [-]
variable    rf      equal       0.3         # coefficient of rolling friction (optional loop) [-]
#variable    rvd    equal        1.0		#coefficientRollingViscousDamping (only for epsd rolling model)
variable    rolfrtypnum equal	4		# rolling friction option ( 1 = off, 2 = cdt, 3 = epsd, 4 = epsd2)
variable    uniSys  equal       1		 # unit System ( 1=SI, 2=cgs)
variable    radDist equal       3          # radius distribution (1 = (25%rad*0.99 , 25%rad*1.01, 50%rad ; 
                                           # 2=gaussian distribution with radmu & radsigma)
                                           # for 2 you must uncomment radsigma & radmu, the latter must be equal to rad
                                           # 3=discrete distribution with real values
variable    dt      equal       1e-6           # time step width [s]

variable    dCylDp  equal       ${DCYLDP}      # ratio cylinder diameter to particle diameter (optional loop)

variable    accGrev equal       9.81    # acceleration due to gravity

processors  ${XPROCS} ${YPROCS} ${ZPROCS}

variable    numProc equal       32

#########################################################################################
#   IF YOU CHANGE ANYTHING BELOW THIS LINE, YOU MIGHT ADAPT THE POSTPROCESSING SCRIPT   #
#########################################################################################

#########################################################################################
#                               internal settings - do not touch                        #
#########################################################################################
variable vthre equal 0.005   # [m/s]; threshold for loop condition
#########################################################################################
#unit System options( 1=SI, 2=cgs)
#  "variable vthre equal 0.5" &  'print "CGS unit system"'                         & #thresold check
# acceleration due to gravity
#  (m SI; cm cgs)
# (>1000 SI ==> >1 cgs)

if "${uniSys} == 2" then                            &
  "variable    accGrev equal       ${accGrev}*100"  &
  "variable    rad     equal       ${rad}*100"      & 
  "variable    dens    equal       ${dens}/1000"    & 
  "variable    ym      equal       ${ym}*10  "      &
  "variable    vthre   equal       ${vthre}*100"    &
  "units		cgs"                                & 
  "print 'CGS unit system'"                         &
else &
  "units		si"                                & 
  "print 'SI unit system'"                         
#########################################################################################
# geometry scaling, mass, number of timesteps, ...
variable    rad1            equal   0.99*${rad}
variable    rad2            equal   1.01*${rad}

variable    skin            equal   0.5*${rad}

variable    cylDiameter     equal   ${dCylDp}*2*${rad} # 50 particle in cyl diameter
variable    cylRadius       equal   0.5*${cylDiameter} # cylinder radius; scale for geometry
variable    cylArea         equal   0.25*${cylDiameter}*${cylDiameter}*PI

variable    desiredMass     equal   ${cylArea}*0.75*${cylDiameter}*0.65*${dens}

variable    rmRegZPos       equal   1.5*${cylRadius}

# dimensions of simulation domain
variable    nx  equal   -${cylRadius}         # neg. x-value
variable    px  equal    ${cylRadius}         # pos. x-value
variable    ny  equal   -${cylRadius}         # neg. y-value
variable    py  equal    ${cylRadius}         # pos. y-value
variable    nz  equal    0.0                  # neg. z-value
variable    pz  equal    4*${cylRadius}       # pos. z-value

# run & dump times
variable    nDump           equal   round(1e-2/${dt})
variable    nScreen         equal   round(1e-3/${dt})

#########################################################################################
#rolling friction options

if "${rolfrtypnum} == 1" then &
  "variable    rolfrtyp string	off" &
elif "${rolfrtypnum} == 2" &
  "variable    rolfrtyp string	cdt" &
elif "${rolfrtypnum} == 3" &
  "variable    rolfrtyp string	epsd" &
else &
  "variable    rolfrtyp string	epsd2" 
#########################################################################################

# create directories
shell   mkdir logs
shell   mkdir restart
shell   mkdir post
shell   mkdir results

# ompOn check
if "${OMPON} == 1" then                            &
  "package omp ${NTHREADS} force/neigh thread-binding verbose"  &
  "modify_timing on"      & 
  "print 'OMP is ON'"                         &
else &
  "print 'OMP is OFF - old version'" 


# writing log file to post folder
log     logs/log_init.shearCell_rad${rad}_dcyldp${dCylDp}.txt

atom_style	granular
atom_modify	map array
boundary    f f f
newton      off

communicate	single vel yes

# definition of the simulation region
region      reg block ${nx} ${px} ${ny} ${py} ${nz} ${pz} units box
create_box  2 reg

neighbor	    ${skin} bin
neigh_modify	delay 0

#Material properties required for new pair styles
fix     m1 all property/global youngsModulus peratomtype ${ym} ${ym}
fix     m2 all property/global poissonsRatio peratomtype ${pr} ${pr}
fix     m3 all property/global coefficientRestitution peratomtypepair 2 ${rest} ${rest} ${rest} ${rest}
fix     m4 all property/global coefficientFriction peratomtypepair 2 ${fric} 0.0 0.0 0.0
fix     m5 all property/global coefficientRollingFriction peratomtypepair 2 ${rf} 0.0 0.0 0.0
#fix    m6 all property/global coefficientRollingViscousDamping peratomtypepair 2 ${rvd} 0.0 0.0 0.0

# pair style # ompOn check
if "${OMPON} == 1" then                            &
  "pair_style 	gran/omp model hertz tangential history rolling_friction ${rolfrtyp}"  &
else &
  "pair_style 	gran model hertz tangential history rolling_friction ${rolfrtyp}" 

pair_coeff	* *

#Timestep
timestep	${dt}

#Gravity & #additional walls for particle insertion
if "${OMPON} == 1" then                            &
  "fix		gravi all gravity/omp ${accGrev} vector 0.0 0.0 -1.0"  &
  "fix     wCylinder all wall/gran/omp model hertz tangential history rolling_friction ${rolfrtyp} primitive type 1 zcylinder ${cylRadius} 0. 0."  &
  "fix     zplane1   all wall/gran/omp model hertz tangential history rolling_friction ${rolfrtyp} primitive type 1 zplane ${nz}"  &
  "fix     zplane2   all wall/gran/omp model hertz tangential history rolling_friction ${rolfrtyp} primitive type 1 zplane ${pz}"  &
else &
  "fix		gravi all gravity ${accGrev} vector 0.0 0.0 -1.0" &
  "fix     wCylinder all wall/gran model hertz tangential history rolling_friction ${rolfrtyp} primitive type 1 zcylinder ${cylRadius} 0. 0."  &
  "fix     zplane1   all wall/gran model hertz tangential history rolling_friction ${rolfrtyp} primitive type 1 zplane ${nz}"  &
  "fix     zplane2   all wall/gran model hertz tangential history rolling_friction ${rolfrtyp} primitive type 1 zplane ${pz}"

# define the material in use  ## pts1 0.25 pts2 0.25  volume_limit ${volMin}"   
if "${radDist} == 2" then                            &
  "fix    pts3 all particletemplate/sphere 5328 atom_type 1 density constant ${dens} radius gaussian number ${radmu} ${radsigma}"  &
  "fix	pdd  all particledistribution/discrete 5332  1 pts3 1.0 "   & 
  "print 'particle radius distribution gaussian'"                         &
elif "${radDist} == 3" &
  "fix		ptsd1  all particletemplate/sphere 5333 atom_type 1 density constant ${dens} radius constant ${radR1}"                                & 
  "fix		ptsd2  all particletemplate/sphere 5334 atom_type 1 density constant ${dens} radius constant ${radR1}"                                & 
  "fix		ptsd3  all particletemplate/sphere 5335 atom_type 1 density constant ${dens} radius constant ${radR3}"                                & 
  "fix		ptsd4  all particletemplate/sphere 5336 atom_type 1 density constant ${dens} radius constant ${radR4}"                                & 
  "fix		ptsd5  all particletemplate/sphere 5337 atom_type 1 density constant ${dens} radius constant ${radR5}"                                & 
  "fix		ptsd6  all particletemplate/sphere 5338 atom_type 1 density constant ${dens} radius constant ${radR6}" & 
  "fix		pdd  all particledistribution/discrete 5339  6 ptsd1 ${radPerc1} ptsd2 ${radPerc2} ptsd3 ${radPerc3} ptsd4 ${radPerc4} ptsd5 ${radPerc5} ptsd6 ${radPerc6}"  &       
  "print 'particle radius distribution discrete REAL'"    &
else &
  "fix		pts  all particletemplate/sphere 5330 atom_type 1 density constant ${dens} radius constant ${rad}"                                & 
  "fix		pts1 all particletemplate/sphere 5329 atom_type 1 density constant ${dens} radius constant ${rad1}"                                & 
  "fix		pts2 all particletemplate/sphere 5331 atom_type 1 density constant ${dens} radius constant ${rad2}" & 
  "fix		pdd  all particledistribution/discrete 5332  3 pts 0.5 pts1 0.25 pts2 0.25"                         &       
  "print 'particle radius distribution discrete zero99 one oneoone'" 

#region and insertion
region  bc cylinder z 0.0 0.0 ${cylRadius} ${nz} ${pz} units box
fix     ins all insert/pack seed 5332 distributiontemplate pdd maxattempt 100 insert_every once overlapcheck yes all_in yes &
		vel constant 0.0 0.0 -0.05 region bc mass_in_region ${desiredMass} ntry_mc 10000

#apply nve integration to all particles that are inserted as single particles
if "${OMPON} == 1" then                            &
  "fix		integr all nve/sphere/omp"  &
else &
  "fix		integr all nve/sphere" 


# load balancing
fix     lb all balance 0 xyz 10 1.05

#check timestep
fix     ts all check/timestep/gran 1 0.1 0.1 #use small values to produce output

#output settings, include total thermal energy
compute		    rke all erotate/sphere
thermo_style	custom step atoms ke c_rke vol cpu
thermo		    ${nScreen}
thermo_modify	lost ignore norm no
compute_modify  thermo_temp dynamic yes

# --- runs ---

#insert the first particles so that dump is not empty
run		  1
dump    dmp all custom ${nDump} post/dump_init_*.shearCell_rad${rad}_dcyldp${dCylDp} id type type x y z ix iy iz vx vy vz fx fy fz omegax omegay omegaz radius

# check only once the timestep
unfix ts
#unfix csv


# make particles slightly larger (to be able to make them smaller lateron)
compute 	rad all property/atom radius
variable	d_grown atom 1.01*2.*c_rad
fix		grow all adapt 1 atom diameter v_d_grown
run		1
unfix		grow

#run particle relaxation - check kinetic energy
#variable ke equal ke
#print "ke ${ke}"

compute vave all reduce ave vz vy vz

variable vcmx equal vcm(all,x)
variable vcmy equal vcm(all,y)
variable vcmz equal vcm(all,z)

variable vave equal sqrt(v_vcmx*v_vcmx+v_vcmy*v_vcmy+v_vcmz*v_vcmz)
#here it was the thresold variable

run     ${nDump}

label loop
  print "-----> Checking Velocity..."
  if "${vave}<${vthre}" then "jump SELF endloop"
  print "-----> v ave ${vave}, v threshold ${vthre}, continuing run"  
  #set group all vx 0. vy 0. vz 0.
  run ${nDump}
jump SELF loop
label endloop


# make particles slightly smaller to remove overlap
variable	d_shrunk atom 1./1.01*2.*c_rad
fix		    shrink all adapt 1 atom diameter v_d_shrunk
run		    1
unfix		  shrink

# remove unnecessary particles
region        regRm block ${nx} ${px} ${ny} ${py} ${rmRegZPos} ${pz} units box
delete_atoms  region regRm compress yes

#write restart
write_restart	./restart/restart.shearCell_rad${rad}_dcyldp${dCylDp}_${OMPON}

#clear
#next     dCylDp
#jump     in.shearCell_init_packing

