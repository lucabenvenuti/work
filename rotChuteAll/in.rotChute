processors  ${XPROCS} ${YPROCS} ${ZPROCS}

variable    numProc equal       ${XPROCS}*${YPROCS}*${ZPROCS}

# create directories
shell   mkdir logs
shell   mkdir restart
shell   mkdir post

# writing log file to post folder
log     logs/log_rotChute.txt

variable    tTot        equal       1000.0 
variable    tim         equal       0.0
variable    pTot        equal       68.0 
variable    p2          equal       0.0
variable    p3          equal       0.0
variable    massRate    equal       25.0
variable    maSs     	equal       ${tTot}*${massRate}

#Conveyor
atom_style	granular
atom_modify	map array
boundary	f f f
newton		off

communicate	single vel yes

units		si

region		reg block -7.0 7.0 -14.0 7.0 -7.0 7.0 units box
create_box	5 reg

neighbor	0.01 bin
neigh_modify	delay 0 binsize 0.08 one 1000

#Material properties required for new pair styles

fix 		m1 all property/global youngsModulus peratomtype 1.e6 1.e6 1.e6 1.e6 1.e6
fix 		m2 all property/global poissonsRatio peratomtype 0.45 0.45 0.45 0.45 0.45
fix 		m3 all property/global coefficientRestitution peratomtypepair 5 	0.3 0.3 0.4 0.3 0.3 0.3 0.3 0.7 0.7 0.7 0.4 0.7 0.5 0.4 0.4 0.3 0.7 0.4 0.4 0.4 0.3 0.7 0.4 0.4 0.4
fix 		m4 all property/global coefficientFriction peratomtypepair 5 		0.3 0.3 0.5 0.3 0.3 0.3 0.3 0.1 0.1 0.1 0.5 0.1 0.5 0.5 0.3 0.3 0.1 0.5 0.5 0.3 0.3 0.1 0.3 0.3 0.3
fix         m5 all property/global coefficientRollingFriction peratomtypepair 5 0.0 0.0 0.3 0.3 0.1 0.0 0.0 0.3 0.3 0.1 0.3 0.3 0.3 0.3 0.2 0.3 0.3 0.3 0.3 0.2 0.1 0.1 0.2 0.2 0.1

#New pair style
pair_style 	gran model hertz tangential history rolling_friction epsd2
pair_coeff	* *

timestep	0.0001

fix		gravi all gravity 9.81 vector 0.0 0.0 -1.0

#granular walls

fix 	zPlane 		all wall/gran model hertz tangential history rolling_friction epsd2 primitive type 1 zplane 0.0
fix 	zCyl 		all wall/gran model hertz tangential history rolling_friction epsd2 primitive type 1 zcylinder 2.8 0.0 0.0
fix		inface 		all mesh/surface file meshes/insertion_face.stl type 1 scale 2.0  move -0.75 0.0 4.7
fix		chute 		all mesh/surface file meshes/simple_chute.stl type 2 rotate axis 0.0 1.0 0.0 angle 15.0 scale 8.0 move 1.24 0.0 4.87
fix 	chuteWall 	all wall/gran model hertz tangential history rolling_friction epsd2 mesh n_meshes 1 meshes chute

#distributions for insertion
fix		pts1 all particletemplate/sphere 1 atom_type 3 density constant 1000 radius constant 0.05
fix		pts2 all particletemplate/sphere 1 atom_type 4 density constant 3500 radius constant 0.05
fix		pts3 all particletemplate/sphere 1 atom_type 5 density constant 2500 radius constant 0.05
fix	    pdd1  all particledistribution/discrete 5339  3 pts1 0.27 pts2 0.64 pts3 0.09

#region for insertion
group		nve_group region reg
region		bc block 0.3 0.5 -0.2 0.2 5.0 6.0 units box

#deprecated pour command
#fix		ins nve_group pour/dev mass 30. 1 distributiontemplate pdd1 vol 0.25 200 massflowrate 30. vel uniform 0. 0. 0. 0. 0.0 region bc

#particle insertion
fix			ins nve_group insert/stream seed 5330 distributiontemplate pdd1 &
				maxattempt 100 mass ${maSs} massrate ${massRate} overlapcheck yes vel constant 0. 0. -1.0&
				insertion_face inface extrude_length 0.8

#apply nve integration to all particles that are inserted as single particles
fix		integr nve_group nve/sphere


#output settings, include total thermal energy
fix				ts all check/timestep/gran 1000 0.1 0.1
compute			rke all erotate/sphere
thermo_style	custom step atoms ke c_rke f_ts[1] f_ts[2] vol
thermo			1000
thermo_modify	lost ignore norm no
compute_modify	thermo_temp dynamic yes

#insert the first particles so that dump is not empty
run			1
dump dumpstl all stl 1000 post/stldump_*.stl
dump		dmp all custom 1000 post/dump*.particles id type type x y z ix iy iz vx vy vz fx fy fz omegax omegay omegaz radius 

#insert particles

label loop1
	print "-----> loop1..."
	if "${tim} > ${tTot}" then "jump SELF endloop1"
	print "tim = ${tim}, continuing loop1 run" 

	label loop2
	  print "-----> loop2..."
	  if "${tim} > ${tTot} || ${p2}==${pTot}" then "jump SELF endloop2"
	  print "p2 = ${p2}, tim = ${tim}, continuing loop2 run"  
	  fix moveChuteZ all move/mesh mesh chute rotate origin 0.0 0.0 4.0 axis 0.0 0.0 1.0 period 16.0
	  run			160000
	  unfix moveChuteZ
	  fix moveChuteY1 all move/mesh mesh chute rotate origin 0.0 0.0 4.0 axis 0.0 -1.0 0.0 period 32.0
	  run			10000
	  unfix moveChuteY1
	  variable    p2     equal       ${p2}+17.0
	  variable    tim     equal       ${tim}+17.0
	jump SELF loop2
	label endloop2
	variable    p2     equal       0.0


	label loop3
	  print "-----> loop3..."
	  if "{tim} > ${tTot} || ${p3}==${pTot}" then "jump SELF endloop3"
	  print "p3 = ${p3}, tim = ${tim}, continuing loop3 run"  
	  fix moveChuteZ all move/mesh mesh chute rotate origin 0.0 0.0 4.0 axis 0.0 0.0 1.0 period 16.0
	  run			160000
	  unfix moveChuteZ
	  fix moveChuteY1 all move/mesh mesh chute rotate origin 0.0 0.0 4.0 axis 0.0 1.0 0.0 period 32.0
	  run			10000
	  unfix moveChuteY1
	  variable    p3     equal       ${p3}+17.0
	  variable    tim     equal       ${tim}+17.0
	jump SELF loop3
	label endloop3
	variable    p3     equal       0.0

	write_restart	./restart/restart.rotChute_${tim}

jump SELF loop1
label endloop1


unfix		ins

 
